(!include stdio.h)
(!include assert.h)
(!include stdlib.h)
(!include string.h)

;;based on Learn C The Hard Way ex16

(defmacro assoc [x & pairs]
  `(set! ~@(mapcat (fn [[k v]] [(list k x) v]) (partition 2 pairs))))

(defmacro update [x & pairs]
  `(set! ~@(mapcat (fn [[k v]]
                     [(list k x)
                      (concat [(first v) (list k x)] (rest v))]) (partition 2 pairs))))

(defstruct Person name:char:ptr age:int height:int weight:int)

(defn create-person:struct:Person:ptr
  [name:char:ptr age:int height:int weight:int]
  (set! who:struct:Person:ptr (malloc (sizeof struct:Person)))
  (assert (!= who nil))
  (assoc
   who
   .-name (strdup name)
   .-age age
   .-height height
   .-weight weight)

  ;;becomes:
  #_(set! (.-name who)   (strdup name)
          (.-age who)    age
          (.-height who) height
          (.-weight who) weight)

  (return who))

(defn print-person:void [who:struct:Person:ptr]
  (printf "Name: %s\n" (.-name who))
  (printf "\tAge: %d\n" (.-age who))
  (printf "\tHeight: %d\n" (.-height who))
  (printf "\tWeight: %d\n" (.-weight who)))

(defn destroy-person:void [who:struct:Person:ptr]
  (free (.-name who))
  (free who))

(defn main:int [argc:int argv:arr:char:ptr]
  (set! joe:struct:Person:ptr (create-person "Joe Alex" 32 64 140)
        frank:struct:Person:ptr (create-person "Frank Blank" 20 72 180))

  (printf "Joe is at memory location %p:\n" joe)
  (print-person joe)

  (printf "Frank is at memory location %p:\n" frank)
  (print-person frank)

  (update
   joe
   .-age (+ 20)
   .-height (- 2)
   .-weight (+ 40))

  ;;becomes:
  #_(set! (.-age joe) (+ (.-age joe) 20)
          (.-height joe) (- (.-height joe) 2)
          (.-weight joe) (+ (.-weight joe) 40))
  (print-person joe)

  (destroy-person joe)
  (destroy-person frank)
  (return 0))
